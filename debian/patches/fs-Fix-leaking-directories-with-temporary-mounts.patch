From: Vojtech Trefny <vtrefny@redhat.com>
Date: Wed, 26 Jul 2023 09:49:16 +0200
Subject: fs: Fix leaking directories with temporary mounts

Fixes: #949
---
 src/plugins/fs/generic.c       | 24 +++++++++++++++---------
 tests/fs_tests/generic_test.py | 32 ++++++++++++++++++++++++++++++++
 2 files changed, 47 insertions(+), 9 deletions(-)

diff --git a/src/plugins/fs/generic.c b/src/plugins/fs/generic.c
index 21032b8..0703eda 100644
--- a/src/plugins/fs/generic.c
+++ b/src/plugins/fs/generic.c
@@ -649,6 +649,7 @@ static gchar* fs_mount (const gchar *device, gchar *fstype, gboolean read_only,
             ret = bd_fs_mount (device, mountpoint, fstype, read_only ? "ro" : NULL, NULL, &l_error);
             if (!ret) {
                 g_propagate_prefixed_error (error, l_error, "Failed to mount '%s': ", device);
+                g_rmdir (mountpoint);
                 g_free (mountpoint);
                 return NULL;
             } else
@@ -686,15 +687,15 @@ static gboolean xfs_resize_device (const gchar *device, guint64 new_size, const
     GError *local_error = NULL;
     BDFSXfsInfo* xfs_info = NULL;
 
-    mountpoint = fs_mount (device, "xfs", FALSE, &unmount, error);
-    if (!mountpoint)
-        return FALSE;
-
     xfs_info = bd_fs_xfs_get_info (device, error);
     if (!xfs_info) {
         return FALSE;
     }
 
+    mountpoint = fs_mount (device, "xfs", FALSE, &unmount, error);
+    if (!mountpoint)
+        return FALSE;
+
     new_size = (new_size + xfs_info->block_size - 1) / xfs_info->block_size;
     bd_fs_xfs_info_free (xfs_info);
 
@@ -715,7 +716,8 @@ static gboolean xfs_resize_device (const gchar *device, guint64 new_size, const
                    from the resize is more important so just ignore the
                    unmount error */
                 g_clear_error (&local_error);
-        }
+        } else
+            g_rmdir (mountpoint);
     }
 
     return success;
@@ -769,7 +771,8 @@ static gboolean nilfs2_resize_device (const gchar *device, guint64 new_size, GEr
                    from the resize is more important so just ignore the
                    unmount error */
                 g_clear_error (&local_error);
-        }
+        } else
+            g_rmdir (mountpoint);
     }
 
     return success;
@@ -804,7 +807,8 @@ static BDFSBtrfsInfo* btrfs_get_info (const gchar *device, GError **error) {
                    from the info is more important so just ignore the
                    unmount error */
                 g_clear_error (&local_error);
-        }
+        } else
+            g_rmdir (mountpoint);
     }
 
     return btrfs_info;
@@ -838,7 +842,8 @@ static gboolean btrfs_resize_device (const gchar *device, guint64 new_size, GErr
                    from the resize is more important so just ignore the
                    unmount error */
                 g_clear_error (&local_error);
-        }
+        } else
+            g_rmdir (mountpoint);
     }
 
     return success;
@@ -872,7 +877,8 @@ static gboolean btrfs_set_label (const gchar *device, const gchar *label, GError
                    from the set label is more important so just ignore the
                    unmount error */
                 g_clear_error (&local_error);
-        }
+        } else
+            g_rmdir (mountpoint);
     }
 
     return success;
diff --git a/tests/fs_tests/generic_test.py b/tests/fs_tests/generic_test.py
index 6bcfffd..ed30666 100644
--- a/tests/fs_tests/generic_test.py
+++ b/tests/fs_tests/generic_test.py
@@ -1045,7 +1045,39 @@ class GenericResize(GenericTestCase):
         """Test generic resize function with an btrfs file system"""
         if not self.btrfs_avail:
             self.skipTest("skipping Btrfs: not available")
+
+        temps1 = set([temp for temp in os.listdir("/tmp") if temp.startswith("blockdev.")])
         self._test_generic_resize(mkfs_function=BlockDev.fs_btrfs_mkfs, min_size=300*1024**2, fstype="btrfs")
+        temps2 = set([temp for temp in os.listdir("/tmp") if temp.startswith("blockdev.")])
+
+        # make sure we didn't leak a temporary mount directory
+        self.assertFalse(temps2 - temps1)
+
+    def test_btrfs_generic_resize_mounted(self):
+        """Test generic resize function with a mounted btrfs file system"""
+        if not self.btrfs_avail:
+            self.skipTest("skipping Btrfs: not available")
+
+        # clean the device
+        succ = BlockDev.fs_clean(self.loop_dev)
+
+        succ = BlockDev.fs_btrfs_mkfs(self.loop_dev, None)
+        self.assertTrue(succ)
+        size = BlockDev.fs_get_size(self.loop_dev)
+
+        with mounted(self.loop_dev, self.mount_dir):
+            # shrink
+            succ = BlockDev.fs_resize(self.loop_dev, 300*1024**2)
+            self.assertTrue(succ)
+            new_size = BlockDev.fs_get_size(self.loop_dev)
+            self.assertAlmostEqual(new_size, 300*1024**2)
+
+            # resize to maximum size
+            succ = BlockDev.fs_resize(self.loop_dev, 0, "btrfs")
+            self.assertTrue(succ)
+            new_size = BlockDev.fs_get_size(self.loop_dev)
+            # should be back to original size
+            self.assertAlmostEqual(new_size, size)
 
     def test_udf_generic_resize(self):
         """Test generic resize function with an udf file system"""
